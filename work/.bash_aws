# kube config
alias kc=kubectl
alias kc0='kc config use-context arn:aws:eks:eu-central-1:982437246452:cluster/liveassess-k8s-prod-0'
alias kc1='kc config use-context arn:aws:eks:us-east-1:982437246452:cluster/liveassess-k8s-prod-1'
alias kc2='kc config use-context arn:aws:eks:ap-northeast-1:982437246452:cluster/liveassess-k8s-prod-2'
alias kc3='kc config use-context arn:aws:eks:ca-central-1:982437246452:cluster/liveassess-k8s-prod-3'
alias kc4='kc config use-context arn:aws:eks:ap-southeast-2:982437246452:cluster/liveassess-k8s-prod-4'
alias kc5='kc config use-context arn:aws:eks:us-east-2:982437246452:cluster/liveassess-k8s-prod-5'
alias kc6='kc config use-context arn:aws:eks:us-west-2:982437246452:cluster/liveassess-k8s-prod-6'

# AWS
function getec2dnsviaservicename()
{
    instance=$(aws ec2 --region $2 describe-instances --filters Name=tag:service_name,Values=$1 --output text --query 'Reservations[*].Instances[*].NetworkInterfaces[*].PrivateDnsName')
    echo "Instance(s):\n$instance"
}

function ecrLogin()
{
     aws ecr get-login-password --region $1 | docker login -u AWS --password-stdin "https://$(aws sts get-caller-identity --query 'Account' --output text).dkr.ecr.$1.amazonaws.com"
}

