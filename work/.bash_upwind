# upwind specific config

# aws 
export DEV_VM_ID="i-0f62707b5fb2a4baa"
export AWS_REGION="us-east-1"
alias awsp='export AWS_PROFILE=$(sed -n "s/\[profile \(.*\)\]/\1/gp" ~/.aws/config | fzf)'
alias login='aws sso login'

# dev
export UPWIND_KEYS_DIR="${HOME}/upwind/keys"
alias grpc-tun='ssh -NR 8209:localhost:8209 -NR 8210:localhost:8210 ${DEV_VM_ID}'
alias glp="git log --pretty=format:'%C(yellow)%h|%Cred%ad|%C(cyan)%an|%Cgreen%d %Creset%s' --date=local"

### Dev VM
function dev-vm-up()
{
    INSTANCE_ID="${DEV_VM_ID}"
    REGION="us-east-1"

    aws ec2 start-instances --instance-ids "$INSTANCE_ID" --region $REGION

    echo "Waiting for the instance to be in 'running' state..."
    aws ec2 wait instance-running --instance-ids "$INSTANCE_ID" --region $REGION

    PUBLIC_IP=$(aws ec2 describe-instances --instance-ids "$INSTANCE_ID" --region $REGION --query "Reservations[*].Instances[*].PublicIpAddress" --output text)

    echo "The public IP address of instance $INSTANCE_ID is: $PUBLIC_IP"
}

function dev-vm-down()
{
    INSTANCE_ID="${DEV_VM_ID}"
    REGION="us-east-1"
    aws ec2 stop-instances --instance-ids "$INSTANCE_ID" --region "$REGION"
}

### DB Queries
function multiquery() 
{
  URL="http://monitoring-receiver.prod.internal:5000/query/"
  SQL_QUERY="$1"
  BODY='{"sql":"'"$SQL_QUERY"'","orgIds":[],"clusterNames":["orgs01","orgs02"],"format":"json"}'
  curl -X POST "$URL" \
    -H 'Content-Type: application/json' \
    -d "$BODY" \
    | jq
}

function org_search () {
    local search_string="$1" 
    if [[ -z "$search_string" ]]
    then
            echo "Usage: org_search <search_string>"
            return 1
    fi
    URL_US="http://monitoring-receiver.us-east-1.prod.internal:5000/query/" 
    URL_EU="http://monitoring-receiver.eu-central-1.prod.internal:5000/query/" 
    URL_ME="http://monitoring-receiver.me-central-1.prod.internal:5000/query/" 
    BODY='{"sql":"SELECT orgId, orgName, clusterName FROM org_db_mappings","orgIds":[],"clusterNames":["coreDb"],"format":"json"}' 
    curl -s -X POST $URL_US -H 'Content-Type: application/json' -d "$BODY" | jq --arg search "$search_string" '.result.coreDb[] | select((.orgId | test($search; "i")) or (.orgName |  test($search; "i"))) | . + {region: "US"}'
    curl -s -X POST $URL_EU -H 'Content-Type: application/json' -d "$BODY" | jq --arg search "$search_string" '.result.coreDb[] | select((.orgId | test($search; "i")) or (.orgName |  test($search; "i"))) | . + {region: "EU"}'
    curl -s -X POST $URL_ME -H 'Content-Type: application/json' -d "$BODY" | jq --arg search "$search_string" '.result.coreDb[] | select((.orgId | test($search; "i")) or (.orgName |  test($search; "i"))) | . + {region: "ME"}'
}

### Working with docker images
# build dockerfile, create image and export file system
function docker-build-export()
{
    docker build -t tempimg .
    cid=$(docker create tempimg)
    mkdir -p output
    docker export "$cid" | tar -C output -xvf -
    docker rm "$cid"
    docker rmi tempimg
}

# Take existing image create filesystem and export it
# Arg1: name of image/sha
# Arg2: output folder
function docker-export()
{
    cid=$(docker create $1)
    docker export ${cid} | tar -xC "$2"
    docker rm ${cid}
}

### Repo commands
## s3-auth-service - get a bearer token
function genlabstokendev() 
{
	UPWIND_AUTH_AUDIENCE="https://agent.upwind.dev"
	UPWIND_AUTH_ENDPOINT="https://oauth.upwind.dev/oauth/token"
	curl -fsSL -X POST --url $UPWIND_AUTH_ENDPOINT --data grant_type=client_credentials --data "audience=${UPWIND_AUTH_AUDIENCE}" --data "client_id=${UPWIND_CLIENT_ID}" --data "client_secret=${UPWIND_CLIENT_SECRET}" | jq -r '.access_token' > ${UPWIND_KEYS_DIR}/labstokendev
}

export NVM_DIR="$HOME/.nvm"
[ -s "/opt/homebrew/opt/nvm/nvm.sh" ] && \. "/opt/homebrew/opt/nvm/nvm.sh"  # This loads nvm
[ -s "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm" ] && \. "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm"  # This loads nvm bash_completion
