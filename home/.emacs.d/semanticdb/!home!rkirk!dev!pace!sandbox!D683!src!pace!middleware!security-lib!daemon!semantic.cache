;; Object daemon/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "daemon/"
  :tables (list 
   (semanticdb-table "daemon.cpp"
    :major-mode 'c++-mode
    :tags 
        '( ("exception" include (:system-flag t) nil [1 21])
            ("unistd.h" include (:system-flag t) nil [22 41])
            ("cerrno" include (:system-flag t) nil [42 59])
            ("cstring" include (:system-flag t) nil [60 78])
            ("tlogger.h" include nil nil [79 99])
            ("tlogger" using (:type ("tlogger" type
                 (:prototype t
                  :type "namespace")
                  nil nil)) nil [101 125])
            ("TLOG_DEFINE_MODULE_LOGGER" function
               (:prototype-flag t
                :type "int")
                nil [126 173])
            ("platformKeySetup" function
               (:prototype-flag t
                :typemodifiers ("static")
                :type "bool")
                nil [1550 1581])
            ("main" function
               (:arguments 
                  ( ("" variable (:type "int") (reparse-symbol arg-sub-list) [2544 2548])
                    ("" variable
                       (:pointer 2
                        :type "char")
                        (reparse-symbol arg-sub-list) [2549 2557]))                  
                :type "int")
                nil [2535 4638])
            ("platformKeySetup" function (:type "bool") nil [4801 5523]))          
    :file "daemon.cpp"
    :pointmax 25679
    :fsize 25678
    :lastmodtime '(21785 11134 967466 508000)
    :unmatched-syntax '((string 152 . 171))
    )
   (semanticdb-table "Makefile"
    :major-mode 'makefile-gmake-mode
    :tags 
        '( ("PWD" variable (:default-value ("$(shell pwd)")) nil [12 29])
            ("CP" variable (:default-value ("cp")) nil [29 35])
            ("RM" variable (:default-value ("rm")) nil [35 41])
            ("MKDIR" variable (:default-value ("mkdir")) nil [41 53])
            ("CC" variable (:default-value ("mipsel-linux-uclibc-gcc" "--sysroot=$(STAGING_PATH)")) nil [53 106])
            ("CXX" variable (:default-value ("mipsel-linux-uclibc-g++" "--sysroot=$(STAGING_PATH)")) nil [106 160])
            ("LD" variable (:default-value ("mipsel-linux-uclibc-gcc" "--sysroot=$(STAGING_PATH)")) nil [160 213])
            ("LIBS" variable (:default-value ("-lpthread")) nil [214 230])
            ("HEADER_PATH" variable (:default-value ("$(PWD)/../interface")) nil [231 266])
            ("LDFLAGS" variable (:default-value ("$(LDFLAGS)" "-Wl,-O1" "$(LIBS)")) nil [266 303])
            ("CFLAGS" variable (:default-value ("$(CFLAGS)" "$(CPPFLAGS)")) nil [303 334])
            ("CFLAGS" variable (:default-value ("-Wall" "-Wextra" "-mips32" "-I$(HDW_DEFS_DIR)" "-I$(HEADER_PATH)")) nil [334 401])
            ("CXXFLAGS" variable (:default-value ("$(CXXFLAGS)" "$(CFLAGS)" "\"-DSL_NEXUS_RSA_BLOB_FILE=\\\"$(SECURITY_LIBRARY_NEXUS_RSA_BLOB_FILE)\\\"\"")) nil [663 767])
            ("OBJS" variable (:default-value ("daemon.o")) nil [768 785])
            ("EXECUTABLES" variable (:default-value ("securityd")) nil [785 808])
            ("EXECUTABLES_INSTALL" variable (:default-value ("$(addprefix $(STAGING_PATH)/usr/sbin/, $(EXECUTABLES))")) nil [980 1056])
            (".SUFFIXES" function (:arguments (".o" ".c" ".cpp")) nil [1057 1079])
            (".cpp.o" function nil nil [1080 1124])
            (".c.o" function nil nil [1125 1164])
            ("install" function (:arguments ("all")) nil [1165 1285])
            ("all" function (:arguments ("$(EXECUTABLES)")) nil [1286 1306])
            ("securityd" function (:arguments ("daemon.o")) nil [1307 1361])
            ("blob-extractor" function (:arguments ("blob-extractor.o")) nil [1362 1437])
            (".PHONY" function (:arguments ("clean")) nil [1438 1452])
            ("clean" function nil nil [1452 1498]))          
    :file "Makefile"
    :pointmax 1498
    :fsize 1497
    :lastmodtime '(21785 11134 967466 508000)
    :unmatched-syntax 'nil
    )
   )
  :file "!home!rkirk!dev!pace!sandbox!D683!src!pace!middleware!security-lib!daemon!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2"
  )
